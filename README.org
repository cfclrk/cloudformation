#+PROPERTY: header-args+ :results output

* Variables

  #+NAME: Env
  | Env Var            | Value                   |
  |--------------------+-------------------------|
  | AWS_PROFILE        | dev                     |
  | AWS_DEFAULT_REGION | us-east-2               |
  | TEMPLATE_PATH      | _out/s3/bucket.yaml     |

  #+begin_src emacs-lisp :var env=Env :exports none
    (setenv-file-export-pairs env)
  #+end_src

  #+RESULTS:

** OrgFilePath

   #+NAME: OrgFilePath
   #+begin_src emacs-lisp :results value
     (let ((template-path (getenv "TEMPLATE_PATH")))
       (f-join "org"
               (f-swap-ext (f-relative template-path "_out" ) "org")))
   #+end_src

** Params

   Read the =Params= table in the org file.

   #+NAME: Params
   #+begin_src emacs-lisp :var OrgFilePath=OrgFilePath :results value
     (with-temp-buffer
       (insert-file-contents OrgFilePath)
       (org-mode)
       (car (read-from-string (org-sbe "Params"))))
   #+end_src

** TemplateName

   =$TemplateName= is just the =$TEMPLATE_PATH= using dashes and without a file
   extension.

   #+NAME: TemplateName
   #+begin_src emacs-lisp :results value
     (let* ((template-path (getenv "TEMPLATE_PATH"))
            (parent-dir (f-base (f-parent template-path)))
            (base-name-dashes (s-replace "_" "-" (f-base template-path))))
       (concat parent-dir "-" base-name-dashes))
   #+end_src

** StackName

   The =$StackName= is =$TemplateName= or =$DeploymentName-$TemplateName=,
   depending on whether the =$Params= specify a =$DeploymentName=.

   #+begin_src emacs-lisp :var TemplateName=TemplateName Params=Params :results value
     (let ((deployment-param (assoc "DeploymentName" Params)))
       (if deployment-param
           (concat (nth 1 deployment-param) "-" TemplateName)
         TemplateName))
   #+end_src

** CreateParamString

   =CreateParamString= is a string of parameters suitable for use with the =aws
   cloudformation create-stack= command.

   #+NAME: CreateParamString
   #+begin_src emacs-lisp :var Params=Params :results value
     (let ((format-param (lambda (pair)
                           (s-format "ParameterKey=$0,ParameterValue=$1" 'elt pair))))
       (s-join " " (mapcar format-param Params)))
   #+end_src

** DeployParamString

   =DeployParamString= is a string of paramaters suitable for use with the =aws
   cloudformation deploy= command.

   #+NAME: DeployParamString
   #+begin_src emacs-lisp :var Params=Params :results value
     (let ((format-param (lambda (pair) (s-format "$0=$1" 'elt pair))))
       (s-join " " (mapcar format-param Params)))
   #+end_src

* Create Stack

** Package

   Only required if the template requires packaging. For a list of properties
   that can be filled in by packaging, see the [[https://docs.aws.amazon.com/cli/latest/reference/cloudformation/package.html][package]] command.

   TODO!

   #+begin_src sh
     aws cloudformation package \
         --template-file file://$TEMPLATE_PATH \
         --output-template-file output.yaml \
         --s3-bucket $BucketName
   #+end_src

** Deploy

   Create or update a stack.

   #+begin_src sh :var StackName=StackName ParamString=DeployParamString :async
     aws cloudformation deploy \
         --stack-name $StackName \
         --template $TEMPLATE_PATH \
         --capabilities CAPABILITY_AUTO_EXPAND CAPABILITY_IAM CAPABILITY_NAMED_IAM \
         --parameter-overrides $ParamString
   #+end_src

** Create

   #+begin_src sh :var StackName=StackName ParamString=CreateParamString
     aws cloudformation create-stack \
         --stack-name $StackName \
         --template-body file://$TEMPLATE_PATH \
         --capabilities CAPABILITY_AUTO_EXPAND CAPABILITY_IAM CAPABILITY_NAMED_IAM \
         --parameters $ParamString
   #+end_src

* Update Stack

** In Place

   #+begin_src sh :var StackName=StackName ParamString=ParamString
     aws cloudformation update-stack \
         --stack-name $StackName \
         --template-body file://$TEMPLATE_PATH \
         --capabilities CAPABILITY_AUTO_EXPAND CAPABILITY_IAM CAPABILITY_NAMED_IAM \
         --parameters $ParamString
   #+end_src

** Using a ChangeSet

   Create a change set:

   #+begin_src sh :var StackName=StackName
     aws cloudformation create-change-set \
         --stack-name $StackName \
         --template-body file://$TEMPLATE_PATH \
         --change-set-name my-changes
   #+end_src

   Describe a change set:

   #+begin_src sh :var StackName=StackName
     aws cloudformation describe-change-set \
         --change-set-name my-changes \
         --stack-name $StackName
   #+end_src

   Apply a change set:

   #+begin_src sh :var StackName=StackName
     aws cloudformation execute-change-set \
         --change-set-name my-changes \
         --stack-name $StackName
   #+end_src

   Delete a change set. Does the change set get deleted automatically when it is
   applied?

   #+begin_src sh :var StackName=StackName
     aws cloudformation delete-change-set \
         --change-set-name my-changes \
         --stack-name $StackName
   #+end_src

* Delete Stack

  #+begin_src sh :var StackName=StackName
    aws cloudformation delete-stack \
        --stack-name $StackName
  #+end_src

* Get Stack Logs

  #+begin_src sh :var StackName=StackName
    aws cloudformation describe-stack-events \
        --stack-name $StackName
  #+end_src

* TODO

  - [ ] Use nested stacks, as is the [[https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/best-practices.html#nested][best practice]].

  - [ ] Force regeneration of all files in =make.el=. This way I can do a =make
    clean= and then a =make=.

  - [ ] Make each page have a link to corresponding YAML file

  # Local Variables:
  # org-src-preserve-indentation: nil
  # org-adapt-indentation: t
  # End:
