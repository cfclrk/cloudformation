#+PROPERTY: header-args+ :var template=template
#+PROPERTY: header-args+ :var deploymentName=deploymentName
#+PROPERTY: header-args+ :results output

* Variables                                                        :noexport:

  #+NAME: template
  : _out/alb/lambda_target.yaml

  #+NAME: deploymentName
  : cf

  Build a CloudFormation stack name from a template file path.

  #+NAME: StackName
  #+begin_src emacs-lisp :var template=template :results value
    (let* ((parent-dir (f-base (f-parent template)))
           (base-name-dashes (s-replace "_" "-" (f-base template))))
      (s-join "-" (list parent-dir base-name-dashes)))
  #+end_src

* Create Stack

** Package

   If the template requires packaging. For a list of properties that can be
   filled in by packaging, see the [[https://docs.aws.amazon.com/cli/latest/reference/cloudformation/package.html][package]] command.

   TODO!

   #+begin_src sh :var template=template
     aws cloudformation package \
         --template-file $template \
         --output-template-file serverless-output.yaml \
         --s3-bucket <<<YOUR BUCKET NAME>>>
   #+end_src

** Create

   #+begin_src sh :var name=name
     aws cloudformation create-stack \
         --stack-name "$deploymentName"-"$name" \
         --template-body file://$template \
         --capabilities CAPABILITY_AUTO_EXPAND CAPABILITY_IAM CAPABILITY_NAMED_IAM \
         --parameters ParameterKey=DeploymentName,ParameterValue=$deploymentName
   #+end_src

* Update Stack

** In Place

   #+begin_src sh :var name=name
     aws cloudformation update-stack \
         --stack-name "$deploymentName"-"$name" \
         --template-body file://$template \
         --capabilities CAPABILITY_AUTO_EXPAND CAPABILITY_IAM CAPABILITY_NAMED_IAM \
         --parameters ParameterKey=DeploymentName,ParameterValue=$deploymentName
   #+end_src

** Using a ChangeSet

   Create a change set:

   #+begin_src sh
     aws cloudformation create-change-set \
         --stack-name $stackName \
         --template-body file://$templateFile \
         --change-set-name my-changes
   #+end_src

   Describe a change set:

   #+begin_src sh
     aws cloudformation describe-change-set \
         --change-set-name my-changes \
         --stack-name $stackName
   #+end_src

   Apply a change set:

   #+begin_src sh
     aws cloudformation execute-change-set \
         --change-set-name my-changes \
         --stack-name $stackName
   #+end_src

   Delete a change set. Does the change set get deleted automatically when it is
   applied?

   #+begin_src sh
     aws cloudformation delete-change-set \
         --change-set-name my-changes \
         --stack-name $stackName
   #+end_src

* Delete Stack

  #+begin_src sh :var StackName=StackName
    aws cloudformation delete-stack --stack-name $StackName
  #+end_src

* Get stack logs

  #+begin_src sh
    aws cloudformation describe-stack-events --stack-name $name
  #+end_src

* TODO

  - [ ] Use nested stacks, as is the [[https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/best-practices.html#nested][best practice]].

  - [ ] Force regeneration of all files in =make.el=. This way I can do a =make
    clean= and then a =make=.

  - [ ] Make each page have a link to corresponding YAML file

  # Local Variables:
  # org-src-preserve-indentation: nil
  # org-adapt-indentation: t
  # End:
