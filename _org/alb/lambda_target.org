#+title: ALB with a Lambda Target
#+setupfile: ../setup.org

#+begin_src yaml
AWSTemplateFormatVersion: 2010-09-09
Description: A public ALB with a Lambda Function target.
Transform: AWS::Serverless-2016-10-31
#+end_src

* Overview

This CloudFormation template creates an internet-facing ALB that invokes a
Lambda Function. That is, you can =curl= the ALB and see a response from the
Lambda Function.

* Prerequisets

- [[file:../network/public.org]] deployed with the same =DeploymentName=

* Parameters

#+begin_src yaml
Parameters:
#+end_src

#+name: Params
| Param          | Value |
|----------------+-------|
| DeploymentName | test  |

** DeploymentName

#+begin_src yaml
  DeploymentName:
    Type: String
    Description: A name for this deployment
#+end_src

A *deployment* is a deployed application, potentially comprised of many
CloudFormation stacks. This is sometimes called an "environment", but that is an
overloaded and confusing term. Use the =DeploymentName= to indicate which
logical deployment a stack belongs to.

If a deployment is completely specified by exactly one CloudFormation template,
the =DeploymentName= and the [[https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/pseudo-parameter-reference.html#cfn-pseudo-param-stackname][AWS::StackName]] refer to the same things. In that
case, consider not using a =DeploymentName= parameter.

* Resources

#+begin_src yaml
Resources:
#+end_src

** ALB (internet-facing)

If you want the ALB to be reachable from the internet, the ALB must:

- Use an internet-facing scheme
- Be associated with /public subnets/

Why can't we use private subnets?

ALBs /can/ be associated with private subnets, but in this case that would break
everything. In AWS-land, only an Internet Gateway can provide a route from the
internet into a Subnet, not an ALB. Maybe that isn't the best design in the
world, but it is what it is.

Some further explanation:

An ALB has a couple of IP addresses (try =host $ALB_DNS_NAME=). If you associate
the ALB with two subnets, the ALB has at least 2 IP addresses: one for each
subnet. When the ALB is associated with a subnet, AWS creates an Elastic Network
Interface (ENI) for the ALB in that subnet, and the ENI is assigned a public IP
address (if this is an internet-facing ALB). /That/ IP becomes one of the ALB's
IP addresses!

Now say those ENIs are in private subnets. This is the same situation as when
you have an EC2 instance in a private subnet with a "public" (internet-valid) IP
address. You can try to query that IP, but you will never reach the instance.

If the ENI is in a private subnet, network traffic to the ENI's IP has no route
into the subnet. So, when an ALB is associated with private subnets, querying
the ALB from the internet will always hang.

#+begin_src yaml
  ALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      IpAddressType: ipv4
      Scheme: internet-facing
      SecurityGroups: [!Ref AlbSecurityGroup]
      Subnets:
        - Fn::ImportValue: !Sub "${DeploymentName}-PublicSubnet1"
        - Fn::ImportValue: !Sub "${DeploymentName}-PublicSubnet2"
      Type: application
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName
#+end_src

#+begin_src yaml
  AlbSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTP on port 80
      VpcId: {Fn::ImportValue: !Sub "${DeploymentName}-VpcId"}
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName
#+end_src

** ALB Routing
#+begin_src yaml
  ALBListenerHTTP:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref AlbTargetGroupLambda
      LoadBalancerArn: !Ref ALB
      Port: 80
      Protocol: HTTP
#+end_src

#+begin_src yaml
  AlbTargetGroupLambda:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    DependsOn: LambdaInvokePermissionElb
    Properties:
      TargetType: lambda
      Targets:
        - Id: !GetAtt HelloWorldFunction.Arn
#+end_src

TODO: Restrict access from only the TargetGroup (using =SourceArn=). This is
tricky. See: https://forums.aws.amazon.com/thread.jspa?threadID=307784

#+begin_src yaml
  LambdaInvokePermissionElb:
    Type: AWS::Lambda::Permission
    DependsOn: HelloWorldFunction
    Properties:
      FunctionName: !Ref HelloWorldFunction
      Action: lambda:InvokeFunction
      Principal: elasticloadbalancing.amazonaws.com
#+end_src

** Lambda Function
#+begin_src yaml
  HelloWorldFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${DeploymentName}-Hello-World"
      InlineCode: |
        import json
        def handler(event, context) -> dict:
            message = {"hello": "world"}
            response = {
                "statusCode": 200,
                "statusDescription": "200 OK",
                "headers": {"Content-Type": "application/json"},
                "body": json.dumps(message),
            }
            return response
      Handler: index.handler
      Runtime: python3.8
      Timeout: 3
#+end_src

* Outputs

#+begin_src yaml
Outputs:
  ALB:
    Description: DNS name for the ALB
    Value: !GetAtt ALB.DNSName
    Export:
      Name: !Sub "${DeploymentName}-ALB"
#+end_src

* Testing

Send an HTTP GET request to the ALB.

#+name: DeploymentName
#+header: :var Params=Params
#+begin_src emacs-lisp
(nth 1 (assoc "DeploymentName" Params))
#+end_src

#+header: :var DeploymentName=DeploymentName
#+begin_src sh
ExportName=${DeploymentName}-ALB

alb=$(aws cloudformation list-exports \
    --query "Exports[?Name=='${DeploymentName}-ALB'].Value" \
    --output text)

curl http://$alb
#+end_src

#+results:
: {"hello": "world"}
