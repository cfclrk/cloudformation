AWSTemplateFormatVersion: 2010-09-09
Description: An EC2 Instance

Parameters:

  DeploymentName:
    Type: String
    Description: A name for this deployment

  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: The name of an EC2 KeyPair
    Default: test

  BuildArtifactBucket:
    Type: String
    Description: Name of an S3 bucket with the web server build artifacts
    Default: test-s3-bucket-bucket-1n9japign3xm7

  BuildArtifactKey:
    Type: String
    Description: S3 object key for a web server build artifact

Mappings:

  RegionMap:
    us-east-1:
      AMI: ami-0aeeebd8d2ab47354
    us-east-2:
      AMI: ami-0d8d212151031f51c

Resources:

  InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${DeploymentName}-InstanceRole"
      Description: Allows EC2 instances to call AWS services
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: InstancePolicy
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - logs:DescribeLogStreams
                  - cloudformation:DescribeStackResource
                  - cloudformation:SignalResource
                Resource: "*"
              - Effect: Allow
                Action:
                  - s3:GetObject
                Resource: !Sub "arn:aws:s3:::${BuildArtifactBucket}/*"

  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: !Sub "${DeploymentName}-InstanceProfile"
      Roles:
        - !Ref InstanceRole

  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTP and SSH
      GroupName: !Sub "${DeploymentName}"
      VpcId: {Fn::ImportValue: !Sub "${DeploymentName}-VpcId"}
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub "${DeploymentName}-instance"

  Instance:
    Type: AWS::EC2::Instance
    Metadata:
      AWS::CloudFormation::Authentication:
        S3AccessCreds:
          type: S3
          buckets:
            - !Sub "${BuildArtifactBucket}"
          roleName: !Ref InstanceRole
      AWS::CloudFormation::Init:
        config:
          files:

            # Config file for cfn-hup
            /etc/cfn/cfn-hup.conf:
              content: !Sub |
                [main]
                stack=${AWS::StackName}
                region=${AWS::Region}
                verbose=true
                interval=3
              mode: "000400"
              owner: root
              group: root

            # Tell cfn-hup to rerun cfn-init after every cloudformation update
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.Instance.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-init -v \
                    --region ${AWS::Region} \
                    --stack ${AWS::StackName} \
                    --resource Instance
                runas=root
              mode: "000400"
              owner: root
              group: root

            # Download the web server binary from S3
            /home/ec2-user/go-webserver:
              source: !Join
                - ""
                - - https://
                  - !Ref BuildArtifactBucket
                  - !Sub .s3.${AWS::Region}.amazonaws.com/
                  - !Ref BuildArtifactKey
              mode: "000755"
              owner: root
              group: root
              authentication: S3AccessCreds

            # Create a systemd unit file for our web application
            /lib/systemd/system/go-webserver.service:
              content: |
                [Unit]
                Description=The go-webserver application
                [Service]
                Type=simple
                ExecStart=/home/ec2-user/go-webserver
                Restart=always

          commands:
            01_enable:
              command: systemctl enable go-webserver
            02_start:
              command: systemctl restart go-webserver

    Properties:
      IamInstanceProfile: !Sub "${DeploymentName}-InstanceProfile"
      ImageId: !FindInMap [RegionMap, !Ref "AWS::Region", AMI]
      InstanceType: t2.nano
      KeyName: !Ref KeyName
      SecurityGroupIds:
        - !Ref SecurityGroup
      # SsmAssociations:
      #   - SsmAssociation
      SubnetId: {Fn::ImportValue: !Sub "${DeploymentName}-PublicSubnet1"}
      Tags:
        - Key: Name
          Value: !Sub "${DeploymentName}-instance"
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          yum update -y
          yum install -y aws-cfn-bootstrap
          # Run cfn-init which processes the AWS::CloudFormation::Init section
          /opt/aws/bin/cfn-init -v \
              --region ${AWS::Region} \
              --stack ${AWS::StackName} \
              --resource Instance
          # Start cfn-hup daemon, which checks Metadata every $interval and then
          # performs actions in /etc/cfn/hooks.d/
          /opt/aws/bin/cfn-hup || error_exit "Failed to start cfn-hup"

Outputs:
  PublicIP:
    Description: Public IP of the EC2 instance
    Value: !GetAtt Instance.PublicIp
    Export:
      Name: !Sub "${DeploymentName}-PublicIP"
