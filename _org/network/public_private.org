#+TITLE: Network with Public and Private Subnets
#+setupfile: ../setup.org

#+begin_src yaml
AWSTemplateFormatVersion: 2010-09-09
Description: >
  A VPC with two public Subnets and two private Subnets. Each public Subnet
  includes a NAT Gateway which provides outbound connectivity from the private
  Subnets to the internet (but not vice versa).
#+end_src

* Overview

[[file:../../img/Network-Public-Private.png]]

This CloudFormation template creates the "standard" AWS network: a VPC with two
public subnets and two private subnets. AWS documents this architecture [[https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Scenario2.html][here]],
and AWS provides a CloudFormation example [[https://docs.aws.amazon.com/codebuild/latest/userguide/cloudformation-vpc-template.html][here]].

This is the go-to VPC architecture; it is a good starting place for AWS network
design. For example, when using the AWS CDK, this is the infrastrucure that is
created when you use the [[https://docs.aws.amazon.com/cdk/api/latest/docs/@aws-cdk_aws-ec2.Vpc.html][VPC construct]] with its default options.

All that having been said, using NAT Gateways is expensive, and there are often
ways around it. Some possibilities are:

- Use only public subnets
- Even with private subnets, you can access AWS services through VPC Endpoints.

* Parameters

#+begin_src yaml
Parameters:
#+end_src

#+name: Params
| Param          | Value |
|----------------+-------|
| DeploymentName | test  |

** DeploymentName

#+begin_src yaml
  DeploymentName:
    Type: String
    Description: A name for this deployment
#+end_src

A *deployment* is a deployed application, potentially comprised of many
CloudFormation stacks. This is sometimes called an "environment", but that is an
overloaded and confusing term. Use the =DeploymentName= to indicate which
logical deployment a stack belongs to.

If a deployment is completely specified by exactly one CloudFormation template,
the =DeploymentName= and the [[https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/pseudo-parameter-reference.html#cfn-pseudo-param-stackname][AWS::StackName]] would refer to the same things. In
that case, consider not using a =DeploymentName= parameter.

#+begin_src yaml
  VPCCIDR:
    Description: CIDR range for this VPC
    Type: String
    Default: 10.192.0.0/16

  PublicSubnet1CIDR:
    Description: CIDR range for public subnet in 1st AZ
    Type: String
    Default: 10.192.10.0/24

  PublicSubnet2CIDR:
    Description: CIDR range for public subnet in 2nd AZ
    Type: String
    Default: 10.192.11.0/24

  PrivateSubnet1CIDR:
    Description: CIDR range for private subnet in 1st AZ
    Type: String
    Default: 10.192.20.0/24

  PrivateSubnet2CIDR:
    Description: CIDR range for private subnet in 2nd AZ
    Type: String
    Default: 10.192.21.0/24
#+end_src

* Resources

#+begin_src yaml
Resources:
#+end_src

** VPC

#+begin_src yaml
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VPCCIDR
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub "${DeploymentName}"
#+end_src

** Internet Gateway

#+begin_src yaml
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub "${DeploymentName}"

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC
#+end_src

** Public Route Table

#+begin_src yaml
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "${DeploymentName} Public"
#+end_src

#+begin_src yaml
  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
#+end_src

** Private Route Tables

#+begin_src yaml
  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "${DeploymentName} Private (AZ1)"
#+end_src

#+begin_src yaml
  DefaultPrivateRoute1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway1
#+end_src

#+begin_src yaml
  PrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "${DeploymentName} Private (AZ1)"
#+end_src

#+begin_src yaml
  DefaultPrivateRoute2:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway2
#+end_src

** Public Subnets

#+begin_src yaml
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [0, !GetAZs ""]
      CidrBlock: !Ref PublicSubnet1CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub "${DeploymentName} Public (AZ1)"

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1
#+end_src

#+begin_src yaml
  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [1, !GetAZs  ""]
      CidrBlock: !Ref PublicSubnet2CIDR
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub "${DeploymentName} Public (AZ2)"

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2
#+end_src

** Private Subnets

There are two differences between "public" and "private" subnets:

1. Public subnets must have a *route to an Internet Gateway*.

   This allows internet traffic to flow between the internet and the
   instance. Note: this isn't actually a quality of the subnet itself;
   rather, it's a matter of what routes are in the Route Table that the
   subnet is associated with.

2. Public subnets often specify =MapPublicIpOnLaunch: true=.

   This tells AWS to assign public IP addresses to EC2 instances in the
   subnet. This is required if you want to be able to =ssh
         user@$INSTANCE_IP=. Which is usually what you want, but one could imagine
   a situation when public IP addresses wouldn't be necessary.

   Private subnets can also specify =MapPublicIpOnLaunch: true=.
   Internet-valid IP addresses would be assigned to instances, but there
   would be no route from the internet to those intstances. That /could/ be
   useful if, say, you want to be able to make a subnet temporarily public by
   temporarily adding a route to the Internet Gateway.

#+begin_src yaml
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [0, !GetAZs  ""]
      CidrBlock: !Ref PrivateSubnet1CIDR
      Tags:
        - Key: Name
          Value: !Sub "${DeploymentName} Private (AZ1)"

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      SubnetId: !Ref PrivateSubnet1
#+end_src

#+begin_src yaml
  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [1, !GetAZs  ""]
      CidrBlock: !Ref PrivateSubnet2CIDR
      Tags:
        - Key: Name
          Value: !Sub "${DeploymentName} Private (AZ2)"

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      SubnetId: !Ref PrivateSubnet2
#+end_src

** NAT Gateways

#+begin_src yaml
  NatGateway1EIP:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc

  NatGateway1:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGateway1EIP.AllocationId
      SubnetId: !Ref PublicSubnet1
#+end_src

#+begin_src yaml
  NatGateway2EIP:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc

  NatGateway2:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGateway2EIP.AllocationId
      SubnetId: !Ref PublicSubnet2
#+end_src

* Outputs

#+begin_src yaml
Outputs:
  VpcId:
    Description: A reference to the created VPC
    Value: !Ref VPC
    Export:
      Name: !Sub "${DeploymentName}-VpcId"

  VpcCidr:
    Description: The VPC CIDR range
    Value: !GetAtt VPC.CidrBlock
    Export:
      Name: !Sub "${DeploymentName}-VpcCidr"

  PublicSubnet1:
    Description: The public subnet in the 1st AZ
    Value: !Ref PublicSubnet1
    Export:
      Name: !Sub "${DeploymentName}-PublicSubnet1"

  PublicSubnet2:
    Description: The public subnet in the 2nd AZ
    Value: !Ref PublicSubnet2
    Export:
      Name: !Sub "${DeploymentName}-PublicSubnet2"

  PrivateSubnet1:
    Description: The private subnet in the 1st AZ
    Value: !Ref PrivateSubnet1
    Export:
      Name: !Sub "${DeploymentName}-PrivateSubnet1"

  PrivateSubnet2:
    Description: The private subnet in the 2nd AZ
    Value: !Ref PrivateSubnet2
    Export:
      Name: !Sub "${DeploymentName}-PrivateSubnet2"
#+end_src
