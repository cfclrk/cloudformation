#+TITLE: EC2 Instance
#+setupfile: ../setup.org

#+begin_src yaml
AWSTemplateFormatVersion: 2010-09-09
Description: An EC2 Instance.
#+end_src

* Prerequisets

- [[file:../network/public.org]] deployed with the same =DeploymentName=
- An EC2 KeyPair in this region

* Overview

This CloudFormation template creates a single EC2 instance.

* Parameters

#+begin_src yaml
Parameters:
#+end_src

** DeploymentName

#+begin_src yaml
  DeploymentName:
    Type: String
    Description: A name for this deployment
#+end_src

A *deployment* is a complete deployed application, potentially comprised of many
CloudFormation stacks. This is sometimes called an "environment", but that is an
overloaded term. Use the =DeploymentName= to indicate which deployment a Stack
is part of.

** KeyName

#+begin_src yaml
  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: The name of an EC2 KeyPair
    Default: test
#+end_src

AWS does not provide a CloudFormation type for EC2 KeyPairs. This was a
deliberate choice: a KeyPair consists of a public and private key, and AWS does
not want to expose the private key in CloudFormation outputs.

This is one example where Terraform has an advantage: since Terraform runs
locally, it can create a KeyPair and save the private key locally.

So, in CloudFormation, you have two options:

1. Create the KeyPair beforehand. Then provide the =KeyName= to your
   CloudFormation template as a parameter.
2. Create the KeyPair using a CloudFormation Custom Resource (i.e. a Lambda
   Function) in your CloudFormation template. The Custom Resource must save the
   private key somewhere (like SecretsManager or SSM Parameter Store).

* Mappings

#+begin_src yaml
Mappings:
#+end_src

Instance mapping

#+begin_src yaml
  RegionMap:
    us-east-1:
      AMI: ami-0aeeebd8d2ab47354
    us-east-2:
      AMI: ami-0d8d212151031f51c
#+end_src

* Resources

#+begin_src yaml
Resources:
#+end_src

** IAM

An EC2 instance isn't /required/ to have an IAM instance profile. However, an
instance profile is a good idea if the instance will talk to any other AWS
service. The only alternative would be to copy AWS credentials onto the instance
somehow.

*** Role

#+begin_src yaml
  InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${DeploymentName}-InstanceRole"
      Description: Allows EC2 instances to call AWS services
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - !Ref InstancePolicy
#+end_src

*** Instance Profile

#+begin_src yaml
  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: !Sub "${DeploymentName}-InstanceProfile"
      Roles:
        - !Ref InstanceRole
#+end_src

*** Policy

#+begin_src yaml
  InstancePolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Description: Allow logging to CloudWatch
      ManagedPolicyName: !Sub "${DeploymentName}-InstancePolicy"
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
              - logs:DescribeLogStreams
            Resource: "*"
#+end_src

** Security Group

#+begin_src yaml
  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTP and SSH
      GroupName: !Sub "${DeploymentName}"
      VpcId: {Fn::ImportValue: !Sub "${DeploymentName}-VpcId"}
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub "${DeploymentName}-instance"
#+end_src

** Instance

#+begin_src yaml
  Instance:
    Type: AWS::EC2::Instance
    Properties:
      IamInstanceProfile: !Sub "${DeploymentName}-InstanceProfile"
      ImageId: Fn::FindInMap [RegionMap, !Ref AWS::Region, AMI]
      InstanceType: t2.nano
      KeyName: !Ref KeyName
      SecurityGroupIds:
        - !Ref SecurityGroup
      SubnetId: {Fn::ImportValue: !Sub "${DeploymentName}-PublicSubnet1"}
      Tags:
        - Key: Name
          Value: !Sub "${DeploymentName}-instance"
#+end_src
