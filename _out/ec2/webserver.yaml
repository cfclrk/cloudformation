AWSTemplateFormatVersion: 2010-09-09
Description: A web server running on an EC2 instance

Parameters:

  DeploymentName:
    Type: String
    Description: A name for this deployment

  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: The name of an EC2 KeyPair
    Default: test

  SSHCIDR:
    Type: String
    Description: IP CIDR range

  BuildArtifactBucket:
    Type: String
    Description: Name of an S3 bucket with the web server build artifacts
    Default: test-s3-bucket-bucket-1n9japign3xm7

  BuildArtifactKey:
    Type: String
    Description: S3 object key for a web server build artifact

Mappings:

  RegionMap:
    us-east-1:
      AMI: ami-0aeeebd8d2ab47354
    us-east-2:
      AMI: ami-0d8d212151031f51c

Resources:

  InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${DeploymentName}-InstanceRole"
      Description: Allows EC2 instances to call AWS services
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: CfnInit
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - cloudformation:DescribeStackResource
                  - cloudformation:SignalResource
                Resource: "*"
        - PolicyName: GetBuildArtifacts
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                Resource: !Sub "arn:aws:s3:::${BuildArtifactBucket}/*"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy

  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: !Sub "${DeploymentName}-InstanceProfile"
      Roles:
        - !Ref InstanceRole

  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTP and SSH
      GroupName: !Sub "${DeploymentName}"
      VpcId: {Fn::ImportValue: !Sub "${DeploymentName}-VpcId"}
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref SSHCIDR
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: !Ref SSHCIDR
      Tags:
        - Key: Name
          Value: !Sub "${DeploymentName}-instance"

  Instance:
    Type: AWS::EC2::Instance
    Metadata:
      AWS::CloudFormation::Authentication:
        S3AccessCreds:
          type: S3
          buckets:
            - !Sub "${BuildArtifactBucket}"
          roleName: !Ref InstanceRole
      AWS::CloudFormation::Init:
        configSets:
          all:
            - 01_install_cfn_hup
            - 02_install_cloudwatch_agent
            - 03_install_web_server

          # Configure and start the cfn-hup daemon, which checks CloudFormation
          # AWS::CloudFormation::Init section every $interval and then performs
          # the actions in /etc/cfn/hooks.d/ hook files.
        01_install_cfn_hup:
          files:
            # A config file for cfn-hup (can it use IMDS for region?)
            /etc/cfn/cfn-hup.conf:
              content: !Sub |
                [main]
                stack=${AWS::StackName}
                region=${AWS::Region}
                verbose=true
                interval=2
              mode: "000400"
              owner: root
              group: root

            # Tell cfn-hup to rerun cfn-init after every cloudformation update
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.Instance.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-init -v \
                    --region ${AWS::Region} \
                    --stack ${AWS::StackName} \
                    --resource Instance \
                    --configsets all
                runas=root
              mode: "000400"
              owner: root
              group: root

            # cfn-hup systemd unit file
            /lib/systemd/system/cfn-hup.service:
              content: |
                [Unit]
                Description=cfn-hup daemon
                [Service]
                Type=simple
                ExecStart=/opt/aws/bin/cfn-hup
                Restart=always
                [Install]
                WantedBy=multi-user.target

          commands:
            01_enable_cfn_hup:
              command: systemctl enable cfn-hup
            02_start_cfn_hup:
              command: systemctl restart cfn-hup

        02_install_cloudwatch_agent:
          files:
            /opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json:
              content: |
                {
                  "metrics": {
                    "append_dimensions": {
                      "ImageId": "${!aws:ImageId}",
                      "InstanceId": "${!aws:InstanceId}",
                      "InstanceType": "${!aws:InstanceType}"
                    },
                    "metrics_collected": {
                      "mem": {
                        "measurement": [
                          "mem_used_percent"
                        ]
                      },
                      "swap": {
                        "measurement": [
                          "swap_used_percent"
                        ]
                      }
                    }
                  }
                }

          commands:
            01_stop_cwa:
              command: /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a stop
            02_start_cwa:
              command: |
                /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl \
                    -a fetch-config \
                    -m ec2 \
                    -c file:/opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json \
                    -s

        03_install_web_server:
          files:
            # Download the web server binary from S3
            /home/ec2-user/go-webserver:
              source: !Join
                - ""
                - - https://
                  - !Ref BuildArtifactBucket
                  - !Sub .s3.${AWS::Region}.amazonaws.com/
                  - !Ref BuildArtifactKey
              mode: "000755"
              owner: root
              group: root
              authentication: S3AccessCreds

            # Create a systemd unit file for our web application
            /lib/systemd/system/go-webserver.service:
              content: |
                [Unit]
                Description=The go-webserver application
                [Service]
                Type=simple
                ExecStart=/home/ec2-user/go-webserver
                Restart=always
                [Install]
                WantedBy=multi-user.target

          commands:
            01_enable_webserver:
              command: systemctl enable go-webserver
            02_start_webserver:
              command: systemctl restart go-webserver

    Properties:
      IamInstanceProfile: !Sub "${DeploymentName}-InstanceProfile"
      ImageId: !FindInMap [RegionMap, !Ref "AWS::Region", AMI]
      InstanceType: t2.nano
      KeyName: !Ref KeyName
      SecurityGroupIds:
        - !Ref SecurityGroup
      # SsmAssociations:
      #   - SsmAssociation
      SubnetId: {Fn::ImportValue: !Sub "${DeploymentName}-PublicSubnet1"}
      Tags:
        - Key: Name
          Value: !Sub "${DeploymentName}-instance"
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          yum update -y
          yum install -y \
              aws-cfn-bootstrap amazon-cloudwatch-agent
          # Run cfn-init which processes the AWS::CloudFormation::Init section
          /opt/aws/bin/cfn-init -v \
              --region ${AWS::Region} \
              --stack ${AWS::StackName} \
              --resource Instance \
              --configsets all

Outputs:
  PublicIP:
    Description: Public IP of the EC2 instance
    Value: !GetAtt Instance.PublicIp
    Export:
      Name: !Sub "${DeploymentName}-PublicIP"
