#+TITLE: ALB with a gRPC Target
#+SETUPFILE: ../setup.org

#+begin_src yaml
AWSTemplateFormatVersion: 2010-09-09
Description: A public ALB with a gRPC target.
Transform: AWS::Serverless-2016-10-31
#+end_src

* Prerequisites

- [[../network/public_private.org]] deployed with the same =DeploymentName=

* Overview

This creates an internet-facing ALB that invokes a gRPC service.

* Parameters

#+begin_src yaml
Parameters:
#+end_src

#+INCLUDE: "../params.org::*DeploymentName"

* Resources

#+begin_src yaml
Resources:
#+end_src

** ALB (internet-facing)

If you want the ALB to be reachable from the internet, the ALB must:

- Use the =internet-facing= scheme
- Be associated with /public subnets/

Why can't we use private subnets? ALBs /can/ be associated with private subnets,
but in this case that would break everything.

An ALB has a couple of IP addresses (see them with =host $ALB_DNS_NAME=). If you
associate the ALB with two subnets, the ALB gets at least 2 IP addresses: one
for each subnet. More specifically: when the ALB is associated with a subnet,
AWS creates an Elastic Network Interface (ENI) in that subnet, and the ENI is
assigned an internet-valid IP address (if this is an internet-facing ALB).
/That/ IP becomes one of the ALB's IP addresses. If the ENI is in a private
subnet, internet traffic to the ENI's IP has no route into the subnet.

So, when an internet-facing ALB is associated with private subnets, querying the
ALB from the internet will always hang.

#+begin_src yaml
  ALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      IpAddressType: ipv4
      Scheme: internet-facing
      SecurityGroups: [!Ref AlbSecurityGroup]
      Subnets:
        - Fn::ImportValue: !Sub "${DeploymentName}-PublicSubnet1"
        - Fn::ImportValue: !Sub "${DeploymentName}-PublicSubnet2"
      Type: application
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName
#+end_src

#+begin_src yaml
  AlbSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTP on port 80
      VpcId: {Fn::ImportValue: !Sub "${DeploymentName}-VpcId"}
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName
#+end_src

** ALB Routing
:PROPERTIES:
:CUSTOM_ID: alb-routing
:END:

#+begin_src yaml
  ALBListenerHTTP:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref AlbTargetGroupLambda
      LoadBalancerArn: !Ref ALB
      Port: 80
      Protocol: HTTP
#+end_src

#+begin_src yaml
  AlbTargetGroupLambda:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    DependsOn: LambdaInvokePermissionElb
    Properties:
      TargetType: lambda
      Targets:
        - Id: !GetAtt HelloWorldFunction.Arn
#+end_src

TODO: Restrict access from only the TargetGroup (using =SourceArn=). This is
tricky. See: https://forums.aws.amazon.com/thread.jspa?threadID=307784

#+begin_src yaml
  LambdaInvokePermissionElb:
    Type: AWS::Lambda::Permission
    DependsOn: HelloWorldFunction
    Properties:
      FunctionName: !Ref HelloWorldFunction
      Action: lambda:InvokeFunction
      Principal: elasticloadbalancing.amazonaws.com
#+end_src

** Lambda Function
:PROPERTIES:
:CUSTOM_ID: lambda-function
:END:

#+begin_src yaml
  HelloWorldFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${DeploymentName}-Hello-World"
      InlineCode: |
        import json
        def handler(event, context) -> dict:
            message = {"hello": "world"}
            response = {
                "statusCode": 200,
                "statusDescription": "200 OK",
                "headers": {"Content-Type": "application/json"},
                "body": json.dumps(message),
            }
            return response
      Handler: index.handler
      Runtime: python3.8
      Timeout: 3
#+end_src

* Outputs

#+begin_src yaml
Outputs:
  ALB:
    Description: DNS name for the ALB
    Value: !GetAtt ALB.DNSName
    Export:
      Name: !Sub "${DeploymentName}-ALB"
#+end_src

* Testing

Send an HTTP GET request to the ALB.

#+begin_src sh :tangle no :results output
  alb=$(aws cloudformation list-exports \
      --query "Exports[?Name=='cf-ALB'].Value" \
      --output text)
  curl http://$alb
#+end_src

#+RESULTS:
: {"hello": "world"}
